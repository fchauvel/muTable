/**
 * This file is part of MuTable.
 *
 * Copyright (C) 2015 Franck Chauvel <franck.chauvel@gmail.com>
 *
 * MuTable is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Mutable is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with MuTable.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.fchauvel.mutable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * Schemas define the structure of the table: the name and type of each of the
 * columns/fields. Fields are indexed from 1 to n and can also be retrieved by
 * name.
 */
public class Schema {

    public static final String DEFAULT_COLUMN_NAME_PREFIX = "column";

    /**
     * @return the schema that matches the given array of objects. The column
     * names are generated by default.
     *
     * @param sampleRow
     */
    public static Schema inferedFrom(Object... sampleRow) {
        return inferedFrom(defaultColumnNames(sampleRow.length), sampleRow);
    }

    public static String[] defaultColumnNames(int columnCount) {
        final String[] columnNames = new String[columnCount];
        for (int index = 0; index < columnCount; index++) {
            columnNames[index] = String.format("%s %d", DEFAULT_COLUMN_NAME_PREFIX, index + 1) ;
        }
        return columnNames;
    }

    /**
     * @return a schema where types of columns are inferred from the given
     * sample row of values.
     * @param columnNames the name of columns, in order
     * @param sampleRow the sample values, in order
     */
    public static Schema inferedFrom(String[] columnNames, Object... sampleRow) {
        if (columnNames.length != sampleRow.length) {
            final String error = String.format("Column names incompatible with values (%d columns found, but %d values).", columnNames.length, sampleRow.length);
            throw new IllegalArgumentException(error);
        }
        final List<Field> fields = new ArrayList<>(sampleRow.length);
        for (int index = 0; index < sampleRow.length; index++) {
            fields.add(new Field(columnNames[index], FieldType.of(sampleRow[index])));
        }
        return new Schema(fields);
    }

    private final List<Field> fields;
    private final Map<String, Integer> indexByName;

    public Schema(Field... fields) {
        this(Arrays.asList(fields));
    }

    public Schema(List<Field> fields) {
        validateFields(fields);

        this.fields = new ArrayList<>();
        this.indexByName = new HashMap<>();
        for (int index = 0; index < fields.size(); index++) {
            final Field each = fields.get(index);
            this.fields.add(each);
            this.indexByName.put(each.getName(), index);
        }

        assert this.fields.size() == this.indexByName.size() : "Inconsistent schema, fields list and index have different sizes";
    }

    /**
     * @throws IllegalArgumentException when some fields are illegal, null
     * field, duplicated names, etc.
     */
    private void validateFields(List<Field> fields) throws IllegalArgumentException {
        if (fields == null) {
            throw new IllegalArgumentException("Illegal list of fields (found 'null')");
        }

        if (fields.isEmpty()) {
            throw new IllegalArgumentException("Illegal list of fields (found '[]')");
        }

        final Map<String, Integer> namesIndex = new HashMap<>();
        for (int index = 0; index < fields.size(); index++) {
            final Field each = fields.get(index);
            if (each == null) {
                final String error = String.format("Illegal list of fields (found 'null' at position %d)", index);
                throw new IllegalArgumentException(error);
            }
            final String name = each.getName();
            if (namesIndex.containsKey(name)) {
                final String error = String.format("Illegal list of fields (found duplicated field name '%s' at position %d and %d)", name, namesIndex.get(name), index);
                throw new IllegalArgumentException(error);
            }
            namesIndex.put(each.getName(), index);
        }
    }

    /**
     * @return the list of fields
     */
    public List<Field> getFields() {
        return Collections.unmodifiableList(fields);
    }

    /**
     * @return the number of fields defined in this schema
     */
    public int getFieldCount() {
        return this.fields.size();
    }

    /**
     * @return the field with given index. Fields are index from 1 to n
     * @param index the index of the needed field
     */
    public Field getField(int index) {
        if (index <= 0 || index > fields.size()) {
            final String error = String.format("Field index out of bounds (%d not within [1, %d])", index, fields.size());
            throw new IllegalArgumentException(error);
        }

        return fields.get(index - 1);
    }

    /**
     * @return the fields with the given name
     * @param name the name of the needed field
     */
    public Field getField(String name) {
        requireValidFieldName(name);
        return this.fields.get(indexByName.get(name));
    }
        
    /**
     * @return the index of the field whose name is given
     * @param name the name of the field whose index is needed
     */
    public int getFieldIndex(String name) {
        requireValidFieldName(name);
        return indexByName.get(name) + 1 ;
    }

    /**
     * Check whether there is a field whose name matches the given one
     */
    private void requireValidFieldName(String name) throws IllegalArgumentException {
        if (!hasFieldNamed(name)) {
            final String error = String.format("Unknown field name (found '%s', expected '%s')", name, indexByName.keySet());
            throw new IllegalArgumentException(error);
        }
    }

    /**
     * @return true, if there is a field with the given name, false otherwise
     */
    public boolean hasFieldNamed(String name) {
        return indexByName.containsKey(name);
    }
    
    /**
     * @return the list of valid field names
     */
    public List<String> getFieldNames() {
        final List<String> fieldNames = new ArrayList<>(fields.size());
        for(Field eachField: fields) {
            fieldNames.add(eachField.getName());
        }
        return fieldNames;
    }

    @Override
    public boolean equals(Object other) {
        if (other instanceof Schema) {
            final Schema otherSchema = (Schema) other;
            if (otherSchema.fields.equals(fields)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(fields);
    }

    @Override
    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append("{");
        for (int index = 0; index < fields.size(); index++) {
            final Field eachField = fields.get(index);
            buffer.append(eachField.getName());
            buffer.append(": ");
            buffer.append(eachField.getType().name());
            if (index < fields.size() - 1) {
                buffer.append(", ");
            }
        }
        buffer.append("}");
        return buffer.toString();
    }

}
